@page "/artists"
@using Microsoft.AspNetCore.Components.Authorization
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.DTOs
@inject IArtistService ArtistService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="featured-header d-flex align-items-center justify-content-between">
	<h3 class="featured-title">Featured Artists:</h3>
	<AuthorizeView Roles="Admin">
		 <Authorized>
			<button class="add-button" @onclick="ShowCreateForm">
				<i class="bi bi-plus-lg center"></i>
			</button>
		 </Authorized>
	 </AuthorizeView>
</div>

@if (isFormVisible)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">@((editingArtistId == null) ? "Add New Artist" : "Edit Artist")</h5>
					<button type="button" class="btn-close" @onclick="HideForm"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="artistFormModel" OnValidSubmit="HandleValidSubmit" FormName="AddEditArtistForm">
						<DataAnnotationsValidator />
						<label for="name">Name:</label>
						<InputText id="name" @bind-Value="artistFormModel.Name" class="form-control mb-2" />
						<ValidationMessage For="@(() => artistFormModel.Name)" />

						<label for="genre">Genre:</label>
						<InputText id="genre" @bind-Value="artistFormModel.Genre" class="form-control mb-2" />
						<ValidationMessage For="@(() => artistFormModel.Genre)" />

						<label for="image">Image:</label>
						<InputText id="image" @bind-Value="artistFormModel.ImageUrl" class="form-control mb-2" />
						<ValidationMessage For="@(() => artistFormModel.ImageUrl)" />

						<button type="submit" class="btn btn-primary mt-2">
							@(editingArtistId == null ? "Add Artist" : "Save Changes")
						</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}

@if (artists.Count == 0)
{
	<p>No artists found.</p>
}
else
{
	<div class="artist-carousel-container">
		<div id="artistCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="5000">
			<div class="carousel-inner">
				@for (int i = 0; i < artists.Count; i += 3)
				{
					var chunk = artists.Skip(i).Take(3).ToList();
					<div class="carousel-item @(i == 0 ? "active" : "")">
						<div class="row gx-4">
							@foreach (var artist in chunk)
							{
								<div class="col-lg-4 col-md-6 col-sm-12">
									<div class="artist-card">
										<div class="card-image-wrapper">
											<img src="@artist.ImageUrl" class="artist-image" alt="@artist.Name" />
											<div class="content-overlay">
												<div class="genre-tag">@artist.Genre</div>
												<div class="info-row">
													<div class="artist-info">
														<h3 class="artist-name">@artist.Name</h3>
													</div>
													<div class="action-buttons">
														<AuthorizeView Roles="Admin">
															<Authorized>
																<button class="btn-action" @onclick="() => ShowEditForm(artist)" title="Edit">
																	<i class="bi bi-pencil "></i>
																</button>
																<button class="btn-action" @onclick="() => ConfirmDeleteAsync(artist.Id)" title="Delete">
																	<i class="bi bi-trash "></i>
																</button>
															</Authorized>
														</AuthorizeView>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				}
			</div>

			<!-- Navigation Controls -->
			<button class="carousel-control carousel-control-prev" type="button" data-bs-target="#artistCarousel" data-bs-slide="prev">
				<i class="bi bi-chevron-left left"></i>
			</button>
			<button class="carousel-control carousel-control-next" type="button" data-bs-target="#artistCarousel" data-bs-slide="next">
				<i class="bi bi-chevron-right right"></i>
			</button>
		</div>
	</div>


}

@code {
	private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

	private ArtistUpdateDto artistFormModel = new();
	private int? editingArtistId = null;
	private bool isFormVisible = false;

	protected override async Task OnInitializedAsync()
	{
		artists = await ArtistService.GetAllArtistsAsync();
	}

	private void ShowCreateForm()
	{
		editingArtistId = null;
		artistFormModel = new ArtistUpdateDto();
		isFormVisible = true;
	}

	private void ShowEditForm(ArtistGetDto artist)
	{
		editingArtistId = artist.Id;
		artistFormModel = new ArtistUpdateDto
			{
				Name = artist.Name,
				Genre = artist.Genre,
				ImageUrl = artist.ImageUrl
			};
		isFormVisible = true;
	}

	private async Task HandleValidSubmit()
	{
		if (editingArtistId == null)
		{
			await ArtistService.AddArtistAsync(artistFormModel);
		}
		else
		{
			await ArtistService.UpdateArtistAsync(artistFormModel, editingArtistId.Value);
		}

		artists = await ArtistService.GetAllArtistsAsync();
		isFormVisible = false;
		artistFormModel = new ArtistUpdateDto();
		editingArtistId = null;
	}

	private async Task DeleteArtist(int id)
	{
		await ArtistService.DeleteArtistAsync(id);
		artists = await ArtistService.GetAllArtistsAsync();
	}

	private async Task ConfirmDeleteAsync(int artistId)
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this artist?");
		if (confirmed)
		{
			await DeleteArtist(artistId);
		}
	}

	private void HideForm()
	{
		isFormVisible = false;
		artistFormModel = new ArtistUpdateDto();
		editingArtistId = null;
	}
}
