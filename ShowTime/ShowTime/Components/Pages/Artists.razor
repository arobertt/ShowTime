@page "/Artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.DTOs
@inject IArtistService ArtistService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3 class="d-flex align-items-center justify-content-between">
    Featured Artists:
    <button class="btn btn-sm btn-success" @onclick="ShowCreateForm">
        <i class="bi bi-plus-lg"></i>
    </button>
</h3>

@if (isFormVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingArtistId == null) ? "Add New Artist" : "Edit Artist")</h5>
                    <button type="button" class="btn-close" @onclick="HideForm"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="artistFormModel" OnValidSubmit="HandleValidSubmit" FormName="AddEditArtistForm">
                        <DataAnnotationsValidator />
                        <label for="name">Name:</label>
                        <InputText id="name" @bind-Value="artistFormModel.Name" class="form-control mb-2" />
                        <ValidationMessage For="@(() => artistFormModel.Name)" />

                        <label for="genre">Genre:</label>
                        <InputText id="genre" @bind-Value="artistFormModel.Genre" class="form-control mb-2" />
                        <ValidationMessage For="@(() => artistFormModel.Genre)" />

                        <label for="image">Image:</label>
                        <InputText id="image" @bind-Value="artistFormModel.ImageUrl" class="form-control mb-2" />
                        <ValidationMessage For="@(() => artistFormModel.ImageUrl)" />

                        <button type="submit" class="btn btn-primary mt-2">
                            @(editingArtistId == null ? "Add Artist" : "Save Changes")
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (artists.Count == 0)
{
    <p>No artists found.</p>
}
else
{
    <div class="position-relative">
        <div id="artistCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                @for (int i = 0; i < artists.Count; i += 3)
                {
                    var chunk = artists.Skip(i).Take(3).ToList();
                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        <div class="row">
                            @foreach (var artist in chunk)
                            {
                                <div class="col-md-4">
                                    <div class="card mb-4 shadow-sm position-relative h-100">
                                        <img src="@artist.ImageUrl" class="card-img-top" alt="@artist.Name" style="height: 200px; object-fit: cover;" />
                                        <div class="card-body">
                                            <h5 class="card-title">@artist.Name</h5>
                                            <p class="card-text">@artist.Genre</p>
                                        </div>
                                        <div>
                                            <div class="position-absolute bottom-0 end-0 m-2 d-flex">
                                                <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowEditForm(artist)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDeleteAsync(artist.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <button class="carousel-control-prev custom-carousel-btn" type="button" data-bs-target="#artistCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon"></span>
            </button>
            <button class="carousel-control-next custom-carousel-btn" type="button" data-bs-target="#artistCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon"></span>
            </button>
        </div>
    </div>

    <style>
        .custom-carousel-btn {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 50px;
            height: 50px;
            background-color: black;
            border: none;
            z-index: 2;
        }

        .carousel-control-prev.custom-carousel-btn {
            left: -20px;
        }

        .carousel-control-next.custom-carousel-btn {
            right: -20px;
        }
    </style>
}

@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    private ArtistUpdateDto artistFormModel = new();
    private int? editingArtistId = null;
    private bool isFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private void ShowCreateForm()
    {
        editingArtistId = null;
        artistFormModel = new ArtistUpdateDto();
        isFormVisible = true;
    }

    private void ShowEditForm(ArtistGetDto artist)
    {
        editingArtistId = artist.Id;
        artistFormModel = new ArtistUpdateDto
            {
                Name = artist.Name,
                Genre = artist.Genre,
                ImageUrl = artist.ImageUrl
            };
        isFormVisible = true;
    }

    private async Task HandleValidSubmit()
    {
        if (editingArtistId == null)
        {
            await ArtistService.AddArtistAsync(artistFormModel);
        }
        else
        {
            await ArtistService.UpdateArtistAsync(artistFormModel, editingArtistId.Value);
        }

        artists = await ArtistService.GetAllArtistsAsync();
        isFormVisible = false;
        artistFormModel = new ArtistUpdateDto();
        editingArtistId = null;
    }

    private async Task DeleteArtist(int id)
    {
        await ArtistService.DeleteArtistAsync(id);
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task ConfirmDeleteAsync(int artistId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this artist?");
        if (confirmed)
        {
            await DeleteArtist(artistId);
        }
    }

    private void HideForm()
    {
        isFormVisible = false;
        artistFormModel = new ArtistUpdateDto();
        editingArtistId = null;
    }
}
