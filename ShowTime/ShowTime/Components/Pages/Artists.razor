@page "/Artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.DTOs
@inject IArtistService ArtistService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="featured-header d-flex align-items-center justify-content-between">
    <h3 class="featured-title">Featured Artists:</h3>
    <button class="add-button" @onclick="ShowCreateForm">
        <i class="bi bi-plus-lg"></i>
    </button>
</div>

@if (isFormVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingArtistId == null) ? "Add New Artist" : "Edit Artist")</h5>
                    <button type="button" class="btn-close" @onclick="HideForm"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="artistFormModel" OnValidSubmit="HandleValidSubmit" FormName="AddEditArtistForm">
                        <DataAnnotationsValidator />
                        <label for="name">Name:</label>
                        <InputText id="name" @bind-Value="artistFormModel.Name" class="form-control mb-2" />
                        <ValidationMessage For="@(() => artistFormModel.Name)" />

                        <label for="genre">Genre:</label>
                        <InputText id="genre" @bind-Value="artistFormModel.Genre" class="form-control mb-2" />
                        <ValidationMessage For="@(() => artistFormModel.Genre)" />

                        <label for="image">Image:</label>
                        <InputText id="image" @bind-Value="artistFormModel.ImageUrl" class="form-control mb-2" />
                        <ValidationMessage For="@(() => artistFormModel.ImageUrl)" />

                        <button type="submit" class="btn btn-primary mt-2">
                            @(editingArtistId == null ? "Add Artist" : "Save Changes")
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (artists.Count == 0)
{
    <p>No artists found.</p>
}
else
{
    <div class="artist-carousel-container">
        <div id="artistCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="5000">
            <div class="carousel-inner">
                @for (int i = 0; i < artists.Count; i += 3)
                {
                    var chunk = artists.Skip(i).Take(3).ToList();
                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        <div class="row gx-4">
                            @foreach (var artist in chunk)
                            {
                                <div class="col-lg-4 col-md-6 col-sm-12">
                                    <div class="artist-card">
                                        <div class="card-image-wrapper">
                                            <img src="@artist.ImageUrl" class="artist-image" alt="@artist.Name" />
                                            <div class="content-overlay">
                                                <div class="genre-tag">@artist.Genre</div>
                                                <div class="info-row">
                                                    <div class="artist-info">
                                                        <h3 class="artist-name">@artist.Name</h3>
                                                    </div>
                                                    <div class="action-buttons">
                                                        <button class="btn-action" @onclick="() => ShowEditForm(artist)" title="Edit">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        <button class="btn-action" @onclick="() => ConfirmDeleteAsync(artist.Id)" title="Delete">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Navigation Controls -->
            <button class="carousel-control carousel-control-prev" type="button" data-bs-target="#artistCarousel" data-bs-slide="prev">
                <i class="bi bi-chevron-left"></i>
            </button>
            <button class="carousel-control carousel-control-next" type="button" data-bs-target="#artistCarousel" data-bs-slide="next">
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    </div>

    <style>
        .artist-carousel-container {
            position: relative;
            margin: 1rem auto 40px auto; /* Push it down to avoid navbar overlap */
            max-width: 95%;
            padding: 0 20px;
            box-sizing: border-box;
        }
        /* Heading Styling */
        .section-header {
            font-size: 1.75rem;
            font-weight: 500;
            color: #1a1a1a;
            margin: 40px 0 20px;
            padding-left: 12px;
            border-left: 4px solid #198754;
        }

        .create-button {
            font-size: 0.9rem;
            padding: 4px 10px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        /* Artist Card */
        .artist-card {
            position: relative;
            height: 600px;
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.3s ease;
        }

        .card-image-wrapper {
            position: relative;
            height: 100%;
            width: 100%;
        }

        .artist-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.4s ease;
        }

        .artist-card:hover .artist-image {
            transform: scale(1.05);
        }

        /* Overlay */
        .content-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0.2) 40%, rgba(0,0,0,0.5) 70%, rgba(0,0,0,0.7) 100%);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 24px;
            transition: opacity 0.3s ease;
        }

        /* Genre */
        .genre-tag {
            align-self: flex-start;
            background: rgba(255, 255, 255, 0.9);
            color: #1a1a1a;
            padding: 6px 14px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            backdrop-filter: blur(10px);
        }

        /* Name + Icons in Row */
        .info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 8px;
            margin-top: auto;
        }

        .artist-info {
            flex-grow: 1;
        }

        .artist-name {
            color: white;
            font-size: 1.75rem;
            font-weight: 400;
            margin: 0;
            letter-spacing: 0.5px;
            text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        /* Buttons (hidden by default) */
        .action-buttons {
            display: flex;
            gap: 12px;
            align-self: flex-end;
        }

        .btn-action {
            width: 36px;
            height: 36px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            backdrop-filter: blur(10px);
            font-size: 0.9rem;
        }

            .btn-action:hover {
                background: rgba(255, 255, 255, 0.2);
                border-color: rgba(255, 255, 255, 0.4);
                transform: scale(1.1);
            }

        .carousel-control {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 48px;
            height: 48px;
            background: #222;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 1.5rem;
            transition: all 0.2s ease;
            z-index: 10;
            opacity: 0.8;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

            .carousel-control:hover {
                background: #000;
                transform: translateY(-50%) scale(1.1);
            }

        .carousel-control-prev {
            left: -30px;
        }

        .carousel-control-next {
            right: -30px;
        }

        .carousel-indicators-custom {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 8px;
            z-index: 10;
        }

            .carousel-indicators-custom button {
                width: 8px;
                height: 8px;
                border-radius: 50%;
                border: none;
                background: rgba(255, 255, 255, 0.4);
                transition: all 0.2s ease;
            }

                .carousel-indicators-custom button.active {
                    background: white;
                    width: 24px;
                    border-radius: 4px;
                }

        .featured-header {
            padding-bottom: 2rem;
            border-bottom: 1px solid #e9ecef;
            margin-bottom: 1.5rem;
        }

        .featured-title {
            font-weight: 600;
            letter-spacing: 0.5px;
            color: #2c3e50;
            margin: 0;
            font-size: 1.75rem;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        /* Show on hover */
        .artist-card:hover .action-buttons {
            opacity: 1;
        }

        .featured-header {
            padding-bottom: 2rem;
            border-bottom: 1px solid #e9ecef;
            margin-bottom: 1.5rem;
        }

        .featured-title {
            font-weight: 600;
            letter-spacing: 0.5px;
            color: #2c3e50;
            margin: 0;
            font-size: 1.75rem;
        }

        .add-button {
            background: #dee2e6;
            border: 2px solid #adb5bd;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.12);
        }

            .add-button:hover {
                background: #ced4da;
                border-color: #6c757d;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }

            .add-button:active {
                transform: scale(0.97);
            }

            .add-button i {
                font-size: 18px;
                color: #212529;
                transition: transform 0.2s ease;
            }

            .add-button:hover i {
                transform: scale(1.1);
            }
    </style>

}

@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    private ArtistUpdateDto artistFormModel = new();
    private int? editingArtistId = null;
    private bool isFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private void ShowCreateForm()
    {
        editingArtistId = null;
        artistFormModel = new ArtistUpdateDto();
        isFormVisible = true;
    }

    private void ShowEditForm(ArtistGetDto artist)
    {
        editingArtistId = artist.Id;
        artistFormModel = new ArtistUpdateDto
            {
                Name = artist.Name,
                Genre = artist.Genre,
                ImageUrl = artist.ImageUrl
            };
        isFormVisible = true;
    }

    private async Task HandleValidSubmit()
    {
        if (editingArtistId == null)
        {
            await ArtistService.AddArtistAsync(artistFormModel);
        }
        else
        {
            await ArtistService.UpdateArtistAsync(artistFormModel, editingArtistId.Value);
        }

        artists = await ArtistService.GetAllArtistsAsync();
        isFormVisible = false;
        artistFormModel = new ArtistUpdateDto();
        editingArtistId = null;
    }

    private async Task DeleteArtist(int id)
    {
        await ArtistService.DeleteArtistAsync(id);
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task ConfirmDeleteAsync(int artistId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this artist?");
        if (confirmed)
        {
            await DeleteArtist(artistId);
        }
    }

    private void HideForm()
    {
        isFormVisible = false;
        artistFormModel = new ArtistUpdateDto();
        editingArtistId = null;
    }
}
