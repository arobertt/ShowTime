@page "/bookings"
@using Microsoft.AspNetCore.Authorization
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.DTOs
@using ShowTime.BusinessLogic.Services
@using ShowTime.DataAccess.Models
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]
@inject IBookingService BookingService
@inject IUserService UserService
@inject IFestivalService FestivalService
@inject IJSRuntime JSRuntime

<div class="d-flex align-items-center justify-content-between mb-4">
    <div class="d-flex align-items-center gap-2">
        <h3 class="mb-0">Bookings Manager</h3>
        <div class="dropdown position-relative">
            <button class="btn filter-icon-button" @onclick="ToggleFilterDropdown">
                <i class="bi bi-funnel-fill"></i>
            </button>
            @if (isFilterDropdownVisible)
            {
                var orderId = "OrderId";
                var festival = "Festival";
                var email = "Email";
                var type = "Type";
                var quantity = "Quantity";

                <ul class="dropdown-menu show" style="position: absolute; z-index: 1050;">
                    <li><button class="dropdown-item" @onclick="() => ApplyFilter(orderId)">Filter by Order ID</button></li>
                    <li><button class="dropdown-item" @onclick="() => ApplyFilter(festival)">Filter by Festival</button></li>
                    <li><button class="dropdown-item" @onclick="() => ApplyFilter(email)">Filter by Email</button></li>
                    <li><button class="dropdown-item" @onclick="() => ApplyFilter(type)">Filter by Type</button></li>
                    <li><button class="dropdown-item" @onclick="() => ApplyFilter(quantity)">Filter by Quantity</button></li>
                </ul>
            }
        </div>
    </div>
</div>


@if (bookings == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!bookings.Any())
{
    <div class="alert alert-info">No bookings found.</div>
}
else
{
    <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
        <table class="table table-hover table-bordered mb-0">
            <thead class="table-dark sticky-top">
                <tr>
                    <th>OrderId</th>
                    <th>Festival</th>
                    <th>Email</th>
                    <th>Type</th>
                    <th>Price</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in bookings)
                {
                    <tr>
                        <td>@booking.Id</td>
                        <td>@festivalNames[booking.FestivalId]</td>
                        <td>@userEmails[booking.UserId]</td>
                        <td>@booking.Type</td>
                        <td>@booking.Price</td>
                        <td>@booking.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    private IList<BookingDto> bookings = new List<BookingDto>();
    private IList<BookingDto> allBookings = new List<BookingDto>();
    private Dictionary<int, string> festivalNames = new();
    private Dictionary<int, string> userEmails = new();
    private bool isFilterDropdownVisible = false;

    private void ToggleFilterDropdown()
    {
        isFilterDropdownVisible = !isFilterDropdownVisible;
    }

    private void ApplyFilter(string filterType)
    {
        isFilterDropdownVisible = false;

        bookings = filterType switch
        {
            "OrderId" => allBookings.OrderBy(b => b.Id).ToList(),
            "Festival" => allBookings.OrderBy(b => festivalNames[b.FestivalId]).ToList(),
            "Email" => allBookings.OrderBy(b => userEmails[b.UserId]).ToList(),
            "Type" => allBookings.OrderBy(b => b.Type).ToList(),
            "Quantity" => allBookings.OrderBy(b => b.Quantity).ToList(),
            _ => allBookings.ToList()
        };
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadBookingsAsync();
        foreach (var booking in bookings)
        {
            if (!festivalNames.ContainsKey(booking.FestivalId))
            {
                var festival = await FestivalService.GetFestivalByIdAsync(booking.FestivalId);
                festivalNames[booking.FestivalId] = festival?.Name ?? "Unknown Festival";
            }

            if (!userEmails.ContainsKey(booking.UserId))
            {
                var userDto = await UserService.GetUserByIdAsync(booking.UserId);
                userEmails[booking.UserId] = userDto?.Email ?? "Unknown";
            }
        }
    }

    private async Task LoadBookingsAsync()
    {
        allBookings = await BookingService.GetAllBookingsAsync();
        bookings = new List<BookingDto>(allBookings);
    }
}

<style>
    .filter-icon-button {
        background: none;
        border: none;
        padding: 0.25rem 0.5rem;
        color: #333;
        font-size: 1.25rem;
    }

        .filter-icon-button:focus,
        .filter-icon-button:active,
        .filter-icon-button:hover {
            background-color: transparent !important;
            box-shadow: none !important;
            outline: none !important;
            color: #000;
        }

    .dropdown-menu {
        min-width: 160px;
        padding: 0.5rem 0;
    }

    .dropdown-item {
        cursor: pointer;
    }
</style>

