@page "/festivals"
@using Microsoft.AspNetCore.Components.Authorization
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.DTOs
@using System.Security.Claims
@inject IFestivalService FestivalService
@inject IBookingService BookingService
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject ILineupService LineupService
@inject IArtistService ArtistService
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

<div class="featured-header d-flex align-items-center justify-content-between">
    <h3 class="mb-4">Upcoming Festivals</h3>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <button class="add-button" @onclick="ShowCreateForm">
                <i class="bi bi-plus-lg center"></i>
            </button>
        </Authorized>
    </AuthorizeView>
</div>

@if (isFormVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingFestivalId == null) ? "Add Festival" : "Edit Festival")</h5>
                    <button type="button" class="btn-close" @onclick="HideForm"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="festivalFormModel" OnValidSubmit="HandleValidSubmit" FormName="AddEditFestivalForm">
                        <DataAnnotationsValidator />

                        <label for="name">Name:</label>
                        <InputText id="name" @bind-Value="festivalFormModel.Name" class="form-control mb-2" />
                        <ValidationMessage For="@(() => festivalFormModel.Name)" />

                        <label for="location">Location:</label>
                        <InputText id="location" @bind-Value="festivalFormModel.Location" class="form-control mb-2" />
                        <ValidationMessage For="@(() => festivalFormModel.Location)" />

                        <label for="splashArt">splashArt:</label>
                        <InputText id="splashArt" @bind-Value="festivalFormModel.SplashArt" class="form-control mb-2" />
                        <ValidationMessage For="@(() => festivalFormModel.SplashArt)" />

                        <label for="capacity">Capacity:</label>
                        <InputNumber id="capacity" @bind-Value="festivalFormModel.Capacity" class="form-control mb-2" />
                        <ValidationMessage For="@(() => festivalFormModel.Capacity)" />

                        <label for="startDate">Start Date:</label>
                        <InputDate id="startDate" @bind-Value="festivalFormModel.StartDate" class="form-control mb-2" />
                        <ValidationMessage For="@(() => festivalFormModel.StartDate)" />

                        <label for="endDate">End Date:</label>
                        <InputDate id="endDate" @bind-Value="festivalFormModel.EndDate" class="form-control mb-2" />
                        <ValidationMessage For="@(() => festivalFormModel.EndDate)" /> 

                        <button type="submit" class="btn btn-primary mt-2">
                            @(editingFestivalId == null ? "Add Festival" : "Save Changes")
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (festivals.Count == 0)
{
    <div class="alert alert-info">No festivals found.</div>
}
else
{
    <div class="festival-container">
        @for (int i = 0; i < festivals.Count; i++)
        {
            var festival = festivals[i];
            bool isEven = i % 2 == 0;

            <div class="festival-card d-flex @(isEven ? "flex-row" : "flex-row-reverse")">
                <div class="festival-image-container">
                    <img src="@festival.SplashArt" class="festival-image" alt="@festival.Name" />
                    <div class="festival-image-overlay"></div>
                </div>

                <div class="festival-details">
                    <div>
                        <div class="festival-header">
                            <div class="festival-header-left">
                                <h5 class="festival-name">@festival.Name</h5>
                            </div>
                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <div class="festival-header-right">
                                        <div class="action-buttons">
                                            <button class="btn-action" @onclick="() => ShowEditForm(festival)" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn-action" @onclick="() => ConfirmDeleteAsync(festival.Id)" title="Delete">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </div>

                        <p class="festival-info"><strong>Location:</strong> @festival.Location</p>
                        <p class="festival-info"><strong>Capacity:</strong> @festival.Capacity</p>
                        <p class="festival-dates">
                            <strong>📅 @festival.StartDate.ToString("dd MMM yyyy") - @festival.EndDate.ToString("dd MMM yyyy")</strong>
                        </p>
                    </div>

                    <div class="d-flex gap-2 flex-wrap">
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowLineupAsync(festival.Id)">
                            View Lineup
                        </button>

                        <AuthorizeView>
                            <NotAuthorized>
                                <a class="btn btn-secondary btn-sm" href="/login">
                                    🎫 Buy Ticket
                                </a>
                            </NotAuthorized>
                            <Authorized>
                                <AuthorizeView Roles="Admin" Context="AdminContext">
                                    <Authorized>
                                        <a class="btn btn-secondary btn-sm" href="/Bookings">
                                            📊 See Bookings
                                        </a>
                                    </Authorized>
                                </AuthorizeView>

                                <AuthorizeView Roles="User" Context="UserContext">
                                    <Authorized>
                                        <button class="btn btn-success btn-sm" @onclick="() => ShowBuyTicketModal(festival.Id, festival.Capacity)">
                                            🎫 Buy Ticket
                                        </button>
                                    </Authorized>
                                </AuthorizeView>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (isBuyTicketModalVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Buy Tickets</h5>
                    <button type="button" class="btn-close" @onclick="CloseBuyTicketModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="ticketType" class="form-label">Ticket Type</label>
                        <select id="ticketType" class="form-select" @bind="selectedTicketType">
                            @foreach (var type in ticketPrices.Keys)
                            {
                                <option value="@type">@type (@ticketPrices[type]$)</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input id="quantity" type="number" min="1" max="@maxCapacity" class="form-control"
                               @bind="selectedQuantity" />
                        <div class="form-text">Max tickets available: @maxCapacity</div>
                    </div>

                    @if (!string.IsNullOrEmpty(buyTicketError))
                    {
                        <div class="alert alert-danger">@buyTicketError</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseBuyTicketModal">Cancel</button>
                    <button class="btn btn-success" @onclick="ConfirmBuyTicketAsync">Buy</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isLineupVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Festival Lineup</h5>
                    <button type="button" class="btn-close" @onclick="CloseLineupModal"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Artist</th>
                                <th>Genre</th>
                                <th>Stage</th>
                                <th>Start Time</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in currentLineup)
                            {
                                var artist = artistMap[item.ArtistId];
                                <tr>
                                    <td>@artist.Name</td>
                                    <td>@artist.Genre</td>
                                    <td>@item.Stage</td>
                                    <td>@item.StartTime.ToString("dd MMM yyyy")</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <hr />
                            <h6>Add Artist to Lineup</h6>

                            @if (!string.IsNullOrEmpty(buyTicketError))
                            {
                                <div class="alert alert-danger">@buyTicketError</div>
                            }

                            <div class="row mb-2">
                                <div class="col">
                                    <select class="form-select" @bind="selectedArtistId">
                                        @foreach (var artist in allArtists)
                                        {
                                            <option value="@artist.Id">@artist.Name (@artist.Genre)</option>
                                        }
                                    </select>
                                </div>
                                <div class="col">
                                    <select class="form-select" @bind="selectedStage">
                                        @foreach (var stage in stageOptions)
                                        {
                                            <option value="@stage">@stage</option>
                                        }
                                    </select>
                                </div>
                                <div class="col">
                                    <InputDate class="form-control" @bind-Value="selectedStartTime" />
                                </div>
                                <div class="col">
                                    <button class="btn btn-success" @onclick="AddLineupAsync">
                                        <i class="bi bi-plus-lg"></i> Add
                                    </button>
                                </div>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private FestivalCreateDto festivalFormModel { get; set; } = new();
    private int? editingFestivalId = null;
    private bool isFormVisible = false;
    private IList<FestivalGetDto> festivals = new List<FestivalGetDto>();
    private BookingDto bookingDto = new();
    private string? userEmail;
    private bool isBuyTicketModalVisible = false;
    private int selectedFestivalId;
    private int selectedQuantity = 1;
    private string selectedTicketType = "General";
    private int maxCapacity = 0;
    private Dictionary<string, int> ticketPrices = new Dictionary<string, int>
{
    { "General", 100 },
    { "VIP", 200 }
};
    private string buyTicketError = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userLoggedIn = authState.User;

        if (userLoggedIn.Identity?.IsAuthenticated == true)
        {
            userEmail = userLoggedIn.FindFirst(ClaimTypes.Email)?.Value;
        }
        else
        {
            userEmail = "Not logged in";
        }
        festivals = await FestivalService.GetAllFestivalsAsync();
    }

    private void ShowCreateForm()
    {
        editingFestivalId = null;
        festivalFormModel = new FestivalCreateDto()
        {
            StartDate = DateTime.Now,
            EndDate = DateTime.Now
        };

        isFormVisible = true;
    }

    private void ShowEditForm(FestivalGetDto festival)
    {
        editingFestivalId = festival.Id;
        festivalFormModel = new FestivalCreateDto
        {
            Name = festival.Name,
            Location = festival.Location,
            SplashArt = festival.SplashArt,
            Capacity = festival.Capacity,
            StartDate = festival.StartDate,
            EndDate = festival.EndDate

        };
        isFormVisible = true;
    }

    private async Task HandleValidSubmit()
    {
        if (editingFestivalId == null)
        {
            await FestivalService.AddFestivalAsync(festivalFormModel);
        }
        else
        {
            await FestivalService.UpdateFestivalAsync(festivalFormModel, editingFestivalId.Value);
        }

        festivals = await FestivalService.GetAllFestivalsAsync();
        isFormVisible = false;
        festivalFormModel = new FestivalCreateDto();
        editingFestivalId = null;
    }

    private async Task DeleteFestival(int id)
    {
        await FestivalService.DeleteFestivalAsync(id);
        festivals = await FestivalService.GetAllFestivalsAsync();
    }

    private async Task ConfirmDeleteAsync(int festivalId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this festival?");
        if (confirmed)
        {
            await DeleteFestival(festivalId);
        }
    }

    private void HideForm()
    {
        isFormVisible = false;
        festivalFormModel = new FestivalCreateDto();
        editingFestivalId = null;
    }

    private void CloseBuyTicketModal()
    {
        isBuyTicketModalVisible = false;
        buyTicketError = "";
    }

    private async Task ConfirmBuyTicketAsync()
    {
        if (selectedQuantity < 1)
        {
            buyTicketError = "Quantity must be at least 1.";
            return;
        }
        if (selectedQuantity > maxCapacity)
        {
            buyTicketError = $"Cannot buy more than {maxCapacity} tickets.";
            return;
        }

        bookingDto = new BookingDto
        {
            FestivalId = selectedFestivalId,
            Type = selectedTicketType,
            UserId = (int)await UserService.GetUserIdByEmailAsync(userEmail),
            Price = ticketPrices[selectedTicketType] * selectedQuantity,
            Quantity = selectedQuantity
        };

        try
        {
            await BookingService.AddBookingAsync(bookingDto);
            festivalFormModel = new FestivalCreateDto()
            {
                Capacity = maxCapacity - selectedQuantity
            };
            await FestivalService.UpdateFestivalAsync(festivalFormModel, selectedFestivalId);
            festivals = await FestivalService.GetAllFestivalsAsync();
            festivalFormModel = new();
            isBuyTicketModalVisible = false;
            buyTicketError = "";
            bookingDto = new BookingDto();
        }
        catch (Exception ex)
        {
            buyTicketError = $"Error while booking ticket: {ex.Message}";
        }
    }

    private void ShowBuyTicketModal(int festivalId, int capacity)
    {
        selectedFestivalId = festivalId;
        maxCapacity = capacity;
        selectedQuantity = 1;
        selectedTicketType = "General";
        buyTicketError = "";
        isBuyTicketModalVisible = true;
    }

    private bool isLineupVisible = false;
    private IList<LineupDto> currentLineup = new List<LineupDto>();
    private Dictionary<int, ArtistGetDto> artistMap = new();
    private int selectedLineupFestivalId;

    private int selectedArtistId;
    private string selectedStage = "";
    private DateTime selectedStartTime = DateTime.Now;
    private DateTime selectedFestivalStart;
    private DateTime selectedFestivalEnd;
    private IList<ArtistGetDto> allArtists = new List<ArtistGetDto>();
    private List<string> stageOptions = new() { "Main Stage", "Side Stage", "Surprise Stage" };

    private async Task ShowLineupAsync(int festivalId)
    {
        var festival = festivals.FirstOrDefault(f => f.Id == festivalId);
        if (festival != null)
        {
            selectedFestivalStart = festival.StartDate;
            selectedFestivalEnd = festival.EndDate;
        }
        selectedLineupFestivalId = festivalId;
        currentLineup = await LineupService.GetAllLineupsAsync();
        currentLineup = currentLineup.Where(l => l.FestivalId == selectedLineupFestivalId).ToList();
        artistMap.Clear();

        foreach (var item in currentLineup)
        {
            if (!artistMap.ContainsKey(item.ArtistId))
            {
                var artist = await ArtistService.GetArtistByIdAsync(item.ArtistId);
                artistMap[item.ArtistId] = artist;
            }
        }
        allArtists = await ArtistService.GetAllArtistsAsync();
        selectedArtistId = allArtists.FirstOrDefault()?.Id ?? 0;
        selectedStage = "Main Stage";
        selectedStartTime = selectedFestivalStart;

        isLineupVisible = true;
    }

    private void CloseLineupModal()
    {
        isLineupVisible = false;
        artistMap.Clear();
        buyTicketError = "";
    }

    private async Task AddLineupAsync()
    {
        if (currentLineup.Any(l => l.ArtistId == selectedArtistId))
        {
            buyTicketError = "This artist is already featured in this festival";
            return;
        }
        var newLineup = new LineupDto
        {
            FestivalId = selectedLineupFestivalId,
            ArtistId = selectedArtistId,
            Stage = selectedStage,
            StartTime = selectedStartTime
        };
        await LineupService.AddLineUpAsync(newLineup);
        await ShowLineupAsync(selectedLineupFestivalId); // refresh list
    }
}
