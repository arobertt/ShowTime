@page "/register"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.DTOs
@using System.Security.Claims
@using ShowTime.DataAccess.Models
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<div class="d-flex justify-content-center align-items-center" style="margin: 5%">
    <div class="card p-4 shadow-sm" style="max-width: 400px; width: 100%;">
        <h3 class="mb-4 text-center">Register</h3>

        <EditForm Model="@registerDto" OnValidSubmit="@HandleRegister" FormName="RegisterForm">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" @bind-Value="registerDto.Email" class="form-control" />
                <ValidationMessage For="() => registerDto.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" @bind-Value="registerDto.Password" type="password" class="form-control" />
                <ValidationMessage For="() => registerDto.Password" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText id="confirmPassword" @bind-Value="registerDto.ConfirmedPassword" type="password" class="form-control" />
                <ValidationMessage For="() => registerDto.ConfirmedPassword" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Register</button>
        </EditForm>

        <div class="mt-3 text-center">
            <p>
                Already have an account?
                <a href="/login" class="link-primary">Login here</a>
            </p>
        </div>
    </div>
</div>


@code {
    [SupplyParameterFromForm]
    private RegisterDto registerDto{ get; set; } = new();
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    private async Task HandleRegister()
    {
        try
        {
            var response = await UserService.RegisterAsync(registerDto);
			if (response == null)
			{
				Console.WriteLine("Registration failed.");
			}
            var claims = new List<Claim>
            {
                new(ClaimTypes.Email, registerDto.Email),
                new(ClaimTypes.Role, Enum.GetName(typeof(Role), response.Role) ?? nameof(Role.User))
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var claimsPrincial = new ClaimsPrincipal(claimsIdentity);

            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincial);
            NavigationManager.NavigateTo("/", forceLoad: true);
            //await JSRuntime.InvokeVoidAsync("fullReloadTo", "/");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

}
