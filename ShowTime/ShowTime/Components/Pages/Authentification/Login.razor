@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.DTOs
@using System.Security.Claims
@using ShowTime.DataAccess.Models
@inject IUserService UserService
@inject NavigationManager NavigationManager	
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-center align-items-center" style="margin: 5%">
	<div class="card p-4 shadow-sm" style="max-width: 400px; width: 100%;">
		<h3 class="mb-4 text-center">Login</h3>

		<EditForm Model="loginInfo" OnValidSubmit="Authenticate" FormName="LoginForm">
			<DataAnnotationsValidator />

			<div class="mb-3">
				<label for="email" class="form-label">Email</label>
				<InputText id="email" class="form-control" @bind-Value="loginInfo.Email" />
				<ValidationMessage For="() => loginInfo.Email" class="text-danger" />
			</div>

			<div class="mb-3">
				<label for="password" class="form-label">Password</label>
				<InputText id="password" type="password" class="form-control" @bind-Value="loginInfo.Password" />
				<ValidationMessage For="() => loginInfo.Password" class="text-danger" />
			</div>

			<button type="submit" class="btn btn-primary w-100">Login</button>
		</EditForm>

		<div class="mt-3 text-center">
			<p>
				Don't have an account?
				<a href="/register" class="link-primary">Register here</a>
			</p>
		</div>
	</div>
</div>


@code {
	[SupplyParameterFromForm]
	private LoginDto loginInfo { get; set; } = new();
	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = null!;
	private async Task Authenticate()
	{
		try
		{
			var response = await UserService.LoginAsync(loginInfo);
			var claims = new List<Claim>
			{
				new(ClaimTypes.Email, loginInfo.Email),
				new(ClaimTypes.Role, Enum.GetName(typeof(Role), response.Role) ?? nameof(Role.User))
			};

			var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
			var claimsPrincial = new ClaimsPrincipal(claimsIdentity);

			await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincial);
			NavigationManager.NavigateTo("/", forceLoad: true);
			
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}
}